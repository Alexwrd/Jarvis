import os
import logging
import os
from aiogram import types, Router, F
from aiogram.types import FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters.command import Command
from config import ADMIN_ID
from database.queries import add_user, get_user_by_username
from database.queries import get_users_by_group, delete_user_by_username
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

router = Router()

class UploadStates(StatesGroup):
    choosing_type = State()
    choosing_group = State()
    choosing_number = State()
    waiting_for_file = State()

class AddUserStates(StatesGroup):
    waiting_for_user_data = State()

class HomeworkStates(StatesGroup):
    choosing_group = State()
    entering_text = State()
    waiting_for_file_optional = State()


def admin_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìö –î–æ–º–∞—à–∫–∞"), KeyboardButton(text="üìò –¢–µ–æ—Ä–∏—è")],
            [KeyboardButton(text="üì§ –î–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"), KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞"), KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤")]
        ],
        resize_keyboard=True
    )

def group_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="ege_1"), KeyboardButton(text="ege_2"), KeyboardButton(text="ege_3")],
            [KeyboardButton(text="oge_1"), KeyboardButton(text="oge_2"), KeyboardButton(text="oge_3")],
            [KeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

@router.message(lambda m: m.text == "üì§ –î–∞—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ")
async def start_homework_upload(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    await message.answer("–í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É –¥–ª—è –î–ó:", reply_markup=group_keyboard())
    await state.set_state(HomeworkStates.choosing_group)


# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–¥–∞—á–∏ –¥–æ–º–∞—à–∫–∏ —É—á–µ–Ω–∏–∫—É
@router.message(lambda msg: msg.text == "üìö –î–æ–º–∞—à–∫–∞")
async def send_homework(message: types.Message):
    username = message.from_user.username
    if not username:
        await message.answer("‚ùó –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username.")
        return

    username = f"@{username}"
    user = get_user_by_username(username)

    if not user:
        await message.answer("‚ùó –í–∞—Å –Ω–µ—Ç –≤ –±–∞–∑–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é.")
        return

    group = user[3]
    text_path = f"files/homework/{group}/latest.txt"
    pdf_path = f"files/homework/{group}/attached.pdf"

    if not os.path.exists(text_path):
        await message.answer("‚ö†Ô∏è –î–æ–º–∞—à–∫–∞ –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
        return

    with open(text_path, "r", encoding="utf-8") as f:
        text = f.read()

    await message.answer(f"üìö –î–æ–º–∞—à–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group.upper()}:\n\n{text}")

    if os.path.exists(pdf_path):
        file = FSInputFile(pdf_path)
        await message.answer_document(file, caption="üìé –ü—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–π —Ñ–∞–π–ª –∫ –¥–æ–º–∞—à–∫–µ")

@router.message(HomeworkStates.choosing_group)
async def choose_group(message: types.Message, state: FSMContext):
    group = message.text.strip().lower()
    if group not in ["ege_1", "ege_2", "ege_3", "oge_1", "oge_2", "oge_3"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫.")
        return
    await state.update_data(group=group)
    await message.answer(f"‚úçÔ∏è –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã {group.upper()}:")
    await state.set_state(HomeworkStates.entering_text)

@router.message(HomeworkStates.entering_text)
async def receive_homework_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    group = data["group"]
    text = message.text.strip()

    os.makedirs(f"files/homework/{group}", exist_ok=True)
    with open(f"files/homework/{group}/latest.txt", "w", encoding="utf-8") as f:
        f.write(text)

    await message.answer(
        "üìé –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å PDF-—Ñ–∞–π–ª —Å –∑–∞–¥–∞–Ω–∏–µ–º ‚Äî –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ —Å–µ–π—á–∞—Å.\n"
        "–ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ ‚Äî –Ω–∞–ø–∏—à–∏ <b>–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å</b>.",
        parse_mode="HTML"
    )
    await state.set_state(HomeworkStates.waiting_for_file_optional)
@router.message(HomeworkStates.waiting_for_file_optional)
async def receive_optional_file(message: types.Message, state: FSMContext):
    data = await state.get_data()
    group = data["group"]
    file_path = f"files/homework/{group}/attached.pdf"

    if message.document:
        if not message.document.file_name.endswith(".pdf"):
            await message.answer("‚ö†Ô∏è –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF-—Ñ–∞–π–ª—ã.")
            return

        file = await message.bot.get_file(message.document.file_id)
        os.makedirs(f"files/homework/{group}", exist_ok=True)
        await message.bot.download_file(file.file_path, destination=file_path)
        await message.answer("‚úÖ –§–∞–π–ª –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω.")
    elif message.text.strip().lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await message.answer("‚è≠Ô∏è –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
    else:
        await message.answer("‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å PDF –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
        return

    await message.answer(f"‚úÖ –î–æ–º–∞—à–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã {group.upper()} –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", reply_markup=admin_menu_keyboard())
    await state.clear()


@router.message(Command("upload"))
async def start_upload(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="üìö –î–æ–º–∞—à–∫–∞"), types.KeyboardButton(text="üìò –¢–µ–æ—Ä–∏—è")]],
        resize_keyboard=True, one_time_keyboard=True
    )
    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å?", reply_markup=keyboard)
    await state.set_state(UploadStates.choosing_type)

@router.message(UploadStates.choosing_type)
async def choose_group(message: types.Message, state: FSMContext):
    if message.text not in ["üìö –î–æ–º–∞—à–∫–∞", "üìò –¢–µ–æ—Ä–∏—è"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∫–Ω–æ–ø–æ–∫.")
        return

    await state.update_data(file_type=message.text)
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="ege_1")],
            [types.KeyboardButton(text="ege_2")],
            [types.KeyboardButton(text="ege_3")],
            [types.KeyboardButton(text="oge_1")],
            [types.KeyboardButton(text="oge_2")],
            [types.KeyboardButton(text="oge_3")],

        ],
        resize_keyboard=True, one_time_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:", reply_markup=keyboard)
    await state.set_state(UploadStates.choosing_group)

@router.message(UploadStates.choosing_group)
async def maybe_choose_number(message: types.Message, state: FSMContext):
    group = message.text
    await state.update_data(group=group)
    data = await state.get_data()

    if data["file_type"] == "üìò –¢–µ–æ—Ä–∏—è":
        numbers = [[types.KeyboardButton(text=str(i)) for i in range(j, j+6)] for j in range(1, 28, 6)]
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è:", reply_markup=types.ReplyKeyboardMarkup(keyboard=numbers, resize_keyboard=True, one_time_keyboard=True))
        await state.set_state(UploadStates.choosing_number)
    else:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª —Å –¥–æ–º–∞—à–∫–æ–π:", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(UploadStates.waiting_for_file)

@router.message(UploadStates.choosing_number)
async def choose_number(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    await state.update_data(number=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª —Å —Ç–µ–æ—Ä–∏–µ–π:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(UploadStates.waiting_for_file)

@router.message(UploadStates.waiting_for_file, F.document)
async def handle_upload(message: types.Message, state: FSMContext):
    document = message.document
    if not document.file_name.endswith(".pdf"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª.")
        return

    data = await state.get_data()
    file_type = data["file_type"]
    group = data["group"]

    if file_type == "üìö –î–æ–º–∞—à–∫–∞":
        os.makedirs("files/homework", exist_ok=True)
        save_path = f"files/homework/{group}.pdf"
    else:
        number = data["number"]
        os.makedirs(f"files/theory/{group}", exist_ok=True)
        save_path = f"files/theory/{group}/{number}.pdf"

    file = await message.bot.get_file(document.file_id)
    await message.bot.download_file(file.file_path, destination=save_path)

    await message.answer(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: `{save_path}`", parse_mode="Markdown")
    await state.clear()

@router.message(Command("add_user"))
async def add_user_cmd(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    args = message.text.split(maxsplit=4)
    if len(args) < 4:
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n<code>/add_user @username –ò–º—è –§–∞–º–∏–ª–∏—è –≥—Ä—É–ø–ø–∞</code>", parse_mode="HTML")
        return

    _, username, *name_parts, group = args
    full_name = " ".join(name_parts)

    if not username.startswith("@"):
        await message.answer("‚ö†Ô∏è Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @")
        return

    add_user(username, full_name, group)
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {full_name} ({username}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {group.upper()}")

@router.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞")
async def start_add_user(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "/add_user @username –ò–º—è –§–∞–º–∏–ª–∏—è –≥—Ä—É–ø–ø–∞\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n/add_user @ivanov –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ ege_1"
    )
    await state.set_state(AddUserStates.waiting_for_user_data)

@router.message(AddUserStates.waiting_for_user_data)
async def process_add_user(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        await state.clear()
        return

    text = message.text
    if not text.startswith("/add_user "):
        await message.answer("–û—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/add_user @username –ò–º—è –§–∞–º–∏–ª–∏—è –≥—Ä—É–ø–ø–∞")
        await state.clear()
        return

    args = text.split(maxsplit=4)
    if len(args) < 4:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n/add_user @username –ò–º—è –§–∞–º–∏–ª–∏—è –≥—Ä—É–ø–ø–∞")
        await state.clear()
        return

    _, username, *name_parts, group = args
    full_name = " ".join(name_parts)

    if not username.startswith("@"):
        await message.answer("Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @")
        await state.clear()
        return

    try:
        add_user(username, full_name, group)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {full_name} ({username}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {group.upper()}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}")
    finally:
        await state.clear()


@router.message(lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤")
async def list_users(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    groups = ["ege_1", "ege_2", "ege_3", "oge_1", "oge_2", "oge_3"]
    result = ""
    for group in groups:
        users = get_users_by_group(group)
        result += f"<b>{group.upper()}</b> ({len(users)} —É—á–µ–Ω–∏–∫–æ–≤):\n"
        for u in users:
            result += f" - {u[2]} ({u[1]})\n"
        result += "\n"

    await message.answer(result, parse_mode="HTML")

# –ù–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞ (–ø–æ –∫–Ω–æ–ø–∫–µ)
@router.message(lambda m: m.text == "‚ùå –£–¥–∞–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞")
async def prompt_delete_user(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    await message.answer(
        "‚ÑπÔ∏è –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n<code>/delete_user @username</code>",
        parse_mode="HTML"
    )

@router.message(Command("delete_user"))
async def delete_user(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    await message.answer("‚ÑπÔ∏è –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —É—á–µ–Ω–∏–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n<code>/delete_user @username</code>", parse_mode="HTML")
    args = message.text.split(maxsplit=1)
    if len(args) < 2 or not args[1].startswith("@"):
        await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n/delete_user @username")
        return

    username = args[1]
    user = get_user_by_username(username)
    if not user:
        await message.answer(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        return

    try:
        delete_user_by_username(username)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")